import sqlite3

# Função para conectar ao banco de dados
def connect():
    conn = sqlite3.connect('biblioteca.db')
    return conn

# Função para criar tabelas no banco de dados
def create_tables():
    conn = connect()

    # Criar tabela de livros
    conn.execute('''CREATE TABLE IF NOT EXISTS livros (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        titulo TEXT,
                        autor TEXT,
                        editora TEXT,
                        ano_publicacao INTEGER,
                        isbn TEXT)''')

    # Criar tabela de usuários
    conn.execute('''CREATE TABLE IF NOT EXISTS usuarios (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT,
                        sobrenome TEXT,
                        endereco TEXT,
                        email TEXT,
                        telefone TEXT)''')

    # Criar tabela de empréstimos
    conn.execute('''CREATE TABLE IF NOT EXISTS emprestimos (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        id_livro INTEGER,
                        id_usuario INTEGER,
                        data_emprestimo TEXT,
                        data_devolucao TEXT,
                        FOREIGN KEY (id_livro) REFERENCES livros(id),
                        FOREIGN KEY (id_usuario) REFERENCES usuarios(id))''')

    conn.commit()
    conn.close()

# Função para inserir um novo livro
def insert_book(titulo, autor, editora, ano_publicacao, isbn):
    conn = connect()
    conn.execute("INSERT INTO livros (titulo, autor, editora, ano_publicacao, isbn) VALUES (?,?,?,?,?)",
                 (titulo, autor, editora, ano_publicacao, isbn))
    conn.commit()
    conn.close()

# Função para inserir um novo usuário
def insert_user(nome, sobrenome, endereco, email, telefone):
    conn = connect()
    conn.execute("INSERT INTO usuarios (nome, sobrenome, endereco, email, telefone) VALUES (?,?,?,?,?)",
                 (nome, sobrenome, endereco, email, telefone))
    conn.commit()
    conn.close()

# Função para inserir um novo empréstimo
def insert_loan(id_livro, id_usuario, data_emprestimo, data_devolucao):
    conn = connect()
    conn.execute("INSERT INTO emprestimos (id_livro, id_usuario, data_emprestimo, data_devolucao) VALUES (?,?,?,?)",
                 (id_livro, id_usuario, data_emprestimo, data_devolucao))
    conn.commit()
    conn.close()

# Função para recuperar todos os livros emprestados
def get_books_on_loan():
    conn = connect()
    result = conn.execute('''SELECT livros.titulo, usuarios.nome, usuarios.sobrenome,
                            emprestimos.data_emprestimo, emprestimos.data_devolucao
                            FROM livros
                            INNER JOIN emprestimos ON livros.id = emprestimos.id_livro
                            INNER JOIN usuarios ON usuarios.id = emprestimos.id_usuario
                            WHERE emprestimos.data_devolucao IS NULL''').fetchall()
    conn.close()
    return result

# Função para atualizar a data de devolução
def update_loan_return_date(id_emprestimo, data_devolucao):
    conn = connect()
    conn.execute("UPDATE emprestimos SET data_devolucao = ? WHERE id = ?", (data_devolucao, id_emprestimo))
    conn.commit()
    conn.close()

# Função para exibir o menu principal
def show_menu():
    print("\n----- Menu da Biblioteca -----")
    print("1. Inserir novo livro")
    print("2. Inserir novo usuário")
    print("3. Realizar um empréstimo")
    print("4. Atualizar a data de devolução de um empréstimo")
    print("5. Exibir todos os livros emprestados no momento")
    print("0. Sair")

    choice = input("Digite o número da opção desejada: ")
    return choice

# Função principal do sistema
def main():
    # Cria as tabelas se elas ainda não existirem
    create_tables()

    while True:
        choice = show_menu()

        if choice == "1":
            titulo = input("Digite o título do livro: ")
            autor = input("Digite o nome do autor: ")
            editora = input("Digite o nome da editora: ")
            ano_publicacao = input("Digite o ano de publicação: ")
            isbn = input("Digite o ISBN do livro: ")
            insert_book(titulo, autor, editora, ano_publicacao, isbn)
            print("Livro inserido com sucesso!")
        
        elif choice == "2":
            nome = input("Digite o nome do usuário: ")
            sobrenome = input("Digite o sobrenome: ")
            endereco = input("Digite o endereço: ")
            email = input("Digite o email: ")
            telefone = input("Digite o telefone: ")
            insert_user(nome, sobrenome, endereco, email, telefone)
            print("Usuário inserido com sucesso!")
        
        elif choice == "3":
            id_livro = input("Digite o ID do livro: ")
            id_usuario = input("Digite o ID do usuário: ")
            data_emprestimo = input("Digite a data do empréstimo (YYYY-MM-DD): ")
            data_devolucao = input("Digite a data prevista de devolução (YYYY-MM-DD): ")
            insert_loan(id_livro, id_usuario, data_emprestimo, data_devolucao)
            print("Empréstimo realizado com sucesso!")
        
        elif choice == "4":
            id_emprestimo = input("Digite o ID do empréstimo: ")
            data_devolucao = input("Digite a nova data de devolução (YYYY-MM-DD): ")
            update_loan_return_date(id_emprestimo, data_devolucao)
            print("Data de devolução atualizada com sucesso!")
        
        elif choice == "5":
            livros_emprestados = get_books_on_loan()
            for livro in livros_emprestados:
                print(f"Título: {livro[0]}, Usuário: {livro[1]} {livro[2]}, Data Empréstimo: {livro[3]}, Data Devolução: {livro[4]}")
        
        elif choice == "0":
            print("Saindo do sistema...")
            break
        
        else:
            print("Opção inválida. Tente novamente.")

# Executa o sistema
if __name__ == "__main__":
    main()
